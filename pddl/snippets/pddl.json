{
  "domain": {
    "prefix": "domain",
    "body": [
      ";Header and description",
      "",
      "(define (domain domainName)",
      "",
      ";remove requirements that are not needed",
      "(:requirements :strips :fluents :durative-actions :timed-initial-literals :typing :conditional-effects :negative-preconditions :duration-inequalities)",
      "",
      "(:types childType1 childType2 - parentType)",
      "",
      "(:constants childA childB - childType1 ",
      ")",
      "",
      "(:predicates (predicate1 ?c - childType1) ",
      ")",
      "",
      "",
      "(:functions (function1 ?c - childType2)",
      "            (cost)",
      ")",
      "",
      ";define actions here",
      "",
      ")"
    ],
    "description": "Define domain"
  },
  "action": {
    "prefix": "action",
    "body": [
        "(:action actionName",
        "     :parameters ()",
        "     :precondition (and (not(predicate1))(predicate2))",
        "     :effect (and (predicate1)))",
        ""
    ],
    "description": "Creates an instantaneous action"
  },
  "durativeaction": {
    "prefix": "action-durative",
    "body": [
        "(:durative-action actionName",
        "    :parameters (?t type1)",
        "    :duration (=?duration 1)",
        "    :condition (and ",
        "        (at start (not(predicate1)))",
        "        (over all (predicate2))",
        "        (at end (predicate3))",
      "    )",
        "    :effect (and ",
      "        (at end(predicate1))",
        "        (at start (not (predicate2)))",
            "        (increase (function1) (* #t (function2 ?t)))",
      "    )",
      ")",
      ""
    ],
    "description": "Creates a durative action" 
  },
  "problem": {
    "prefix": "problem",
    "body": [
      "(define (problem problemName) (:domain domainName)",
      "(:objects",
        "    object11 object12 - childType1",
        "    object21 object22 - childType2",
      ")",
      "(:init",
        "    (predicate1 object12)",
        "    (= (function1 object12) 123.45)",
      ")",
      "",
      "(:goal (and",
          "        (predicate1 object22)",
        "    )",
      ")",
      "",
      "(:metric minimize (cost))",
      ")",
      ""
    ],
    "description": "Creates a problem skeleton"
  }
}