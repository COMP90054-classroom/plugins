{
  "domain": {
    "prefix": "domain",
    "body": [
      ";Header and description",
      "",
      "(define (domain ${1:name})",
      "",
      ";remove requirements that are not needed",
      "(:requirements :strips :fluents :durative-actions :timed-initial-literals :typing :conditional-effects :negative-preconditions :duration-inequalities :equality)",
      "",
      "(:types ;todo: enumerate types and their hierarchy here, e.g. car truck bus - vehicle",
      ")",
      "",
      "; uncomment following line if constants are needed",
      ";(:constants )",
      "",
      "(:predicates ;todo: define predicates here",
      ")",
      "",
      "",
      "(:functions ;todo: define numeric functions here",
      ")",
      "",
      ";define actions here",
      "$0",
      ")"
    ],
    "description": "Define domain"
  },
  "action": {
    "prefix": "action",
    "body": [
        "(:action ${1:name}",
        "     :parameters ($0)",
        "     :precondition (and )",
        "     :effect (and )",
        ")",
        ""
    ],
    "description": "Creates an instantaneous action"
  },
  "durativeaction": {
    "prefix": "action-durative", 
    "body": [
      "(:durative-action ${1:name}",
        "    :parameters ($0)",
        "    :duration ${2|(= ?duration 1),(and (>= ?duration 1)(<= ?duration 2))|}",
        "    :condition (and ",
        "        (at start ())",
        "        (over all ())",
        "        (at end ())",
        "    )",
        "    :effect (and ",
        "        (at start ())",
        "        (at end ())",
        "    )",
        ")",
      ""
    ],
    "description": "Creates a durative action"
  },
  "increase":{
    "prefix": "increase",
    "body": ["(increase ${1} (* #t $0)"],
    "description": "Continuous increase effect"
  },
  "decrease":{
    "prefix": "decrease",
    "body": ["(decrease ${1} (* #t $0)"],
    "description": "Continuous decrease effect"
  },
  "problem": {
    "prefix": "problem",
    "body": [
      "(define (problem ${1:name}) (:domain ${2:domain-name})",
      "(:objects $0",
      ")",
      "",
      "(:init",
        "    ;todo: put the initial state's facts and numeric values here",
      ")",
      "",
      "(:goal (and",
      "    ;todo: put the goal condition here",
      "    )",
      ")",
      "",
      ";uncomment the following line if metric is needed",
      ";(:metric ${3|minimize,maximize|} (???))",
      ")",
      ""
    ],
    "description": "Creates a problem skeleton"
  }
}