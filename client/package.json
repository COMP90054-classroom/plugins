{
  "name": "pddl",
  "displayName": "PDDL",
  "description": "Planning Domain Description Language support",
  "author": "Jan Dolejsi",
  "license": "MIT",
  "version": "2.6.5",
  "publisher": "jan-dolejsi",
  "engines": {
    "vscode": "^1.22.0",
		"node": "^7.9.0"
  },
  "categories": [
    "Snippets",
    "Programming Languages",
    "Debuggers"
  ],
  "keywords": [
    "PDDL",
    "planning",
    "AI"
  ],
  "icon": "images/icon.png",
  "galleryBanner": {
    "color": "#ff402b",
    "theme": "light"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/jan-dolejsi/vscode-pddl"
  },
  "activationEvents": [
    "onLanguage:pddl",
    "onLanguage:plan",
    "onLanguage:happenings",
    "workspaceContains:**/*.pddl",
    "workspaceContains:**/*ptest.json",
    "onCommand:pddl.configureParser",
    "onCommand:pddl.configurePlanner"
  ],
  "main": "./out/client/src/extension",
  "contributes": {
    "languages": [
      {
        "id": "pddl",
        "aliases": [
          "PDDL",
          "pddl"
        ],
        "extensions": [
          ".pddl",
          ""
        ],
        "configuration": "./language-configuration.json",
        "firstLine": "\\(define\\s\\((domain|problem)\\b"
      },
      {
        "id": "plan",
        "aliases": [
          "PDDL Plan",
          "Plan"
        ],
        "extensions": [
          ".plan"
        ],
        "configuration": "./language-configuration.json"
      },
      {
        "id": "happenings",
        "aliases": [
          "PDDL Plan Happenings",
          "Happenings"
        ],
        "extensions": [
          ".happenings"
        ],
        "configuration": "./language-configuration.json"
      }
    ],
    "breakpoints": [
      {
        "language": "happenings"
      }
    ],
    "grammars": [
      {
        "language": "pddl",
        "scopeName": "source.pddl",
        "path": "./syntaxes/pddl.tmLanguage.json"
      },
      {
        "language": "plan",
        "scopeName": "source.pddl.plan",
        "path": "./syntaxes/plan.tmLanguage.json"
      },
      {
        "language": "happenings",
        "scopeName": "source.pddl.happenings",
        "path": "./syntaxes/happenings.tmLanguage.json"
      }
    ],
    "snippets": [
      {
        "language": "pddl",
        "path": "./snippets/pddl.json"
      }
    ],
    "commands": [
      {
        "command": "pddl.planAndDisplayResult",
        "title": "PDDL: Run the planner and display the plan"
      },
      {
        "command": "pddl.stopPlanner",
        "title": "PDDL: Stop planner"
      },
      {
        "command": "pddl.configureParser",
        "title": "PDDL: Configure parser"
      },
      {
        "command": "pddl.loginParserService",
        "title": "PDDL: Login for parser service"
      },
      {
        "command": "pddl.updateTokensParserService",
        "title": "PDDL: Update tokens for parser service"
      },
      {
        "command": "pddl.configurePlanner",
        "title": "PDDL: Configure planner"
      },
      {
        "command": "pddl.loginPlannerService",
        "title": "PDDL: Login for planner service"
      },
      {
        "command": "pddl.updateTokensPlannerService",
        "title": "PDDL: Update tokens for planner service"
      },
      {
        "command": "pddl.planReport",
        "title": "PDDL: Generate plan report"
      },
      {
        "command": "pddl.exportPlan",
        "title": "PDDL: Export plan a to file..."
      },
      {
        "command": "pddl.convertPlanToHappenings",
        "title": "PDDL: Convert plan to happenings..."
      },
      {
        "command": "pddl.tests.refresh",
        "title": "Refresh",
        "icon": {
          "light": "images/light/refresh.svg",
          "dark": "images/dark/refresh.svg"
        }
      },
      {
        "command": "pddl.tests.run",
        "title": "Run",
        "icon": {
          "light": "images/light/play.svg",
          "dark": "images/dark/play.svg"
        }
      },
      {
        "command": "pddl.tests.runAll",
        "title": "Run all",
        "icon": {
          "light": "images/light/play.svg",
          "dark": "images/dark/play.svg"
        }
      },
      {
        "command": "pddl.tests.view",
        "title": "Open PDDL domain and test problem",
        "icon": {
          "light": "images/light/open-file.svg",
          "dark": "images/dark/open-file.svg"
        }
      },
      {
        "command": "pddl.tests.viewDefinition",
        "title": "Open test definition"
      },
      {
        "command": "pddl.tests.viewExpectedPlans",
        "title": "Open expected plan(s)"
      },
      {
        "command": "pddl.tests.problemSaveAs",
        "title": "PDDL: Open as an editable problem file..."
      },
      {
        "command": "pddl.plan.validate",
        "title": "PDDL: Validate plan"
      }
    ],
    "menus": {
      "editor/context": [
        {
          "command": "pddl.planAndDisplayResult",
          "when": "resourceLangId == pddl"
        },
        {
          "command": "pddl.tests.problemSaveAs",
          "when": "resourceLangId == pddl && resourceScheme == tpddl"
        },
        {
          "command": "pddl.convertPlanToHappenings",
          "when": "resourceLangId == plan"
        },
        {
          "command": "pddl.plan.validate",
          "when": "resourceLangId == plan"
        }
      ],
      "view/title": [
        {
          "command": "pddl.tests.refresh",
          "when": "view == PTestExplorer",
          "group": "navigation"
        }
      ],
      "view/item/context": [
        {
          "command": "pddl.tests.run",
          "when": "view == PTestExplorer && viewItem == test",
          "group": "execution"
        },
        {
          "command": "pddl.tests.runAll",
          "when": "view == PTestExplorer && viewItem == manifest",
          "group": "execution"
        },
        {
          "command": "pddl.tests.view",
          "when": "view == PTestExplorer && viewItem == test",
          "group": "navigation"
        },
        {
          "command": "pddl.tests.viewDefinition",
          "when": "view == PTestExplorer && viewItem != folder",
          "group": "navigation"
        },
        {
          "command": "pddl.tests.viewExpectedPlans",
          "when": "view == PTestExplorer && viewItem == test",
          "group": "navigation"
        }
      ]
    },
    "keybindings": [
      {
        "command": "pddl.planAndDisplayResult",
        "key": "alt+p",
        "when": "resourceLangId == pddl"
      }
    ],
    "jsonValidation": [
      {
        "fileMatch": "*.planviz.json",
        "url": "./schemas/planviz.json"
      },
      {
        "fileMatch": "*.ptest.json",
        "url": "./schemas/ptest.json"
      }
    ],
    "configuration": {
      "type": "object",
      "title": "PDDL parser and planner configuration",
      "properties": {
        "pddlParser.executableOrService": {
          "type": "string",
          "description": "PDDL parser for syntactical analysis. Specify executable location or service URL e.g. parser.exe, validate.exe, or http://localhost:8090/parse."
        },
        "pddlParser.executableOptions": {
          "type": "string",
          "description": "Override the command-line options passed to the PDDL parser configured in 'pddlParser.executableOrService'.",
          "pattern": "^\\$\\(parser\\).+\\$\\(domain\\).+\\$\\(problem\\).*$",
          "default": "$(parser) $(domain) $(problem)"
        },
        "pddlParser.problemPattern": {
          "scope": "resource",
          "type": "string",
          "description": "Pattern to match onto the parser output to extract the parsing problems. The syntax must be: '/regex/flags/order'. See more info at https://github.com/jan-dolejsi/vscode-pddl/wiki/Configuring-the-PDDL-parser"
        },
        "pddlParser.pddlParserService": {
          "scope": "resource",
          "type": "string",
          "description": "Obsolete: please remove configuration values manually."
        },
        "pddlParser.serviceAuthenticationEnabled": {
          "scope": "resource",
          "type": "boolean",
          "description": "PDDL parser requires authentication."
        },
        "pddlParser.serviceAuthenticationUrl": {
          "scope": "resource",
          "type": "string",
          "description": "Authentication URL."
        },
        "pddlParser.serviceAuthenticationRequestEncoded": {
          "scope": "resource",
          "type": "string",
          "description": "Authentication request encoded."
        },
        "pddlParser.serviceAuthenticationClientId": {
          "scope": "resource",
          "type": "string",
          "description": "Authentication clientid."
        },
        "pddlParser.serviceAuthenticationCallbackPort": {
          "scope": "resource",
          "type": "string",
          "description": "Authentication callback port."
        },
        "pddlParser.serviceAuthenticationTimeoutInMs": {
          "scope": "resource",
          "type": "number",
          "default": 10000,
          "description": "Authentication timeout in ms."
        },
        "pddlParser.serviceAuthenticationTokensvcUrl": {
          "scope": "resource",
          "type": "string",
          "description": "Authentication token service URL."
        },
        "pddlParser.serviceAuthenticationTokensvcApiKey": {
          "scope": "resource",
          "type": "string",
          "description": "Authentication token service API Key."
        },
        "pddlParser.serviceAuthenticationTokensvcAccessPath": {
          "scope": "resource",
          "type": "string",
          "description": "Authentication token service access path."
        },
        "pddlParser.serviceAuthenticationTokensvcValidatePath": {
          "scope": "resource",
          "type": "string",
          "description": "Authentication token service validate path."
        },
        "pddlParser.serviceAuthenticationTokensvcCodePath": {
          "scope": "resource",
          "type": "string",
          "description": "Authentication token service code path."
        },
        "pddlParser.serviceAuthenticationTokensvcRefreshPath": {
          "scope": "resource",
          "type": "string",
          "description": "Authentication token service refresh path."
        },
        "pddlParser.serviceAuthenticationTokensvcSvctkPath": {
          "scope": "resource",
          "type": "string",
          "description": "Authentication token service svctk path."
        },
        "pddlParser.serviceAuthenticationRefreshToken": {
          "scope": "resource",
          "type": "string",
          "description": "Authentication refresh token."
        },
        "pddlParser.serviceAuthenticationAccessToken": {
          "scope": "resource",
          "type": "string",
          "description": "Authentication access token."
        },
        "pddlParser.serviceAuthenticationSToken": {
          "scope": "resource",
          "type": "string",
          "description": "Authentication s token."
        },
        "pddlParser.delayInSecondsBeforeParsing": {
          "scope": "resource",
          "type": "number",
          "default": 3,
          "minimum": 1,
          "description": "Delay in seconds the extension should wait after a PDDL file is modified before calls the parser."
        },
        "pddlParser.maxNumberOfProblems": {
          "scope": "resource",
          "type": "number",
          "default": 100,
          "minimum": 1,
          "description": "Controls the maximum number of problems produced by the parser."
        },
        "pddlPlanner.executableOrService": {
          "scope": "window",
          "type": "string",
          "title": "Planner executable or service URL",
          "default": "http://solver.planning.domains/solve",
          "description": "Enter the planner executable (e.g. planner.exe) with full path unless you have its location included in the %path% environment variable. If you are using a parsing service, make sure it starts with http: or https:"
        },
        "pddlPlanner.executableOptions": {
          "scope": "window",
          "type": "string",
          "description": "Override the command-line options passed to the PDDL planner configured in 'pddlPlanner.executableOrService'.",
          "pattern": "^\\$\\(planner\\).+\\$\\(options\\).+\\$\\(domain\\).+\\$\\(problem\\).*$",
          "default": "$(planner) $(options) $(domain) $(problem)"
        },
        "pddlPlanner.serviceAuthenticationEnabled": {
          "scope": "resource",
          "type": "boolean",
          "description": "PDDL planner requires authentication."
        },
        "pddlPlanner.serviceAuthenticationUrl": {
          "scope": "resource",
          "type": "string",
          "description": "Authentication URL."
        },
        "pddlPlanner.serviceAuthenticationRequestEncoded": {
          "scope": "resource",
          "type": "string",
          "description": "Authentication request encoded."
        },
        "pddlPlanner.serviceAuthenticationClientId": {
          "scope": "resource",
          "type": "string",
          "description": "Authentication clientid."
        },
        "pddlPlanner.serviceAuthenticationCallbackPort": {
          "scope": "resource",
          "type": "string",
          "description": "Authentication callback port."
        },
        "pddlPlanner.serviceAuthenticationTimeoutInMs": {
          "scope": "resource",
          "type": "number",
          "default": 10000,
          "description": "Authentication timeout in ms."
        },
        "pddlPlanner.serviceAuthenticationTokensvcUrl": {
          "scope": "resource",
          "type": "string",
          "description": "Authentication token service URL."
        },
        "pddlPlanner.serviceAuthenticationTokensvcApiKey": {
          "scope": "resource",
          "type": "string",
          "description": "Authentication token service API Key."
        },
        "pddlPlanner.serviceAuthenticationTokensvcAccessPath": {
          "scope": "resource",
          "type": "string",
          "description": "Authentication token service access path."
        },
        "pddlPlanner.serviceAuthenticationTokensvcValidatePath": {
          "scope": "resource",
          "type": "string",
          "description": "Authentication token service validate path."
        },
        "pddlPlanner.serviceAuthenticationTokensvcCodePath": {
          "scope": "resource",
          "type": "string",
          "description": "Authentication token service code path."
        },
        "pddlPlanner.serviceAuthenticationTokensvcRefreshPath": {
          "scope": "resource",
          "type": "string",
          "description": "Authentication token service refresh path."
        },
        "pddlPlanner.serviceAuthenticationTokensvcSvctkPath": {
          "scope": "resource",
          "type": "string",
          "description": "Authentication token service svctk path."
        },
        "pddlPlanner.serviceAuthenticationRefreshToken": {
          "scope": "resource",
          "type": "string",
          "description": "Authentication refresh token."
        },
        "pddlPlanner.serviceAuthenticationAccessToken": {
          "scope": "resource",
          "type": "string",
          "description": "Authentication access token."
        },
        "pddlPlanner.serviceAuthenticationSToken": {
          "scope": "resource",
          "type": "string",
          "description": "Authentication s token."
        },
        "pddlPlanner.epsilonTimeStep": {
          "type": "number",
          "default": 0.001,
          "title": "Default epsilon time step used by your planner.",
          "description": "Default epsilon time step used by your planner. This is used when interpreting/visualizing the plan. "
        },
        "pddlPlanner.valueSeqPath": {
          "type": "string",
          "description": "ValueSeq path - the tool that evaluates numeric values of functions at starts and ends of actions in the plan."
        },
        "pddlTestExplorer.enabled": {
          "type": "boolean",
          "default": true,
          "description": "Enable/disable the preview of PDDL test explorer. Restart the editor for the change to take effect."
        },
        "pddlPlan.validatorPath": {
          "type": "string",
          "description": "Path of the 'validate' executable."
        }
      }
    },
    "views": {
      "test": [
        {
          "id": "PTestExplorer",
          "name": "PDDL Tests"
        }
      ]
    },
    "debuggers": [
      {
        "type": "pddl-plan",
        "label": "PDDL Plan Debugger",
        "program": "./out/debugger/debugAdapter.js",
        "runtime": "node",
        "configurationAttributes": {
          "launch": {
            "required": [
              "program"
            ],
            "properties": {
              "program": {
                "type": "string",
                "description": "Absolute path to a text file.",
                "default": "${workspaceFolder}/${command:AskForProgramName}"
              },
              "stopOnEntry": {
                "type": "boolean",
                "description": "Automatically stop after launch.",
                "default": true
              },
              "trace": {
                "type": "boolean",
                "description": "Enable logging of the Debug Adapter Protocol.",
                "default": true
              }
            }
          }
        },
        "initialConfigurations": [
          {
            "type": "mock",
            "request": "launch",
            "name": "Ask for file name",
            "program": "${workspaceFolder}/${command:AskForProgramName}",
            "stopOnEntry": true
          }
        ],
        "configurationSnippets": [
          {
            "label": "Mock Debug: Launch",
            "description": "A new configuration for 'debugging' a user selected markdown file.",
            "body": {
              "type": "mock",
              "request": "launch",
              "name": "Ask for file name",
              "program": "^\"\\${workspaceFolder}/\\${command:AskForProgramName}\"",
              "stopOnEntry": true
            }
          }
        ],
        "variables": {
          "AskForProgramName": "extension.mock-debug.getProgramName"
        }
      }
    ]
  },
  "scripts": {
    "postinstall": "node ./node_modules/vscode/bin/install",
    "compile": "tsc -p ./",
    "watch": "tsc -w -p ./",
    "vscode:prepublish": "npm run compile",
    "update-vscode": "node ./node_modules/vscode/bin/install",
    "package": "vsce package"
  },
  "dependencies": {
    "child-process-data": "^0.5.5",
    "express": "^4.16.2",
    "npm": "^6.0.0",
    "nunjucks": "^3.1.2",
    "opn": "^5.1.0",
    "request": "^2.83.0",
    "tmp": "^0.0.33",
    "to": "^0.2.9",
    "tree-kill": "^1.2.0",
    "update": "^0.7.4",
    "util.promisify": "^1.0.0",
    "vscode-debugadapter": "1.27.0",
    "vscode-debugprotocol": "1.27.0"
  },
  "devDependencies": {
    "vscode": "^1.1.17",
    "@types/request": "^2.0.5",
    "@types/tmp": "^0.0.33",
    "typescript": "^2.9.1"
  }
}